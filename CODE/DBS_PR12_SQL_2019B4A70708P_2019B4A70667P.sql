CREATE database GROUP127;
USE GROUP127;

CREATE TABLE customer (
 customer_id INT UNSIGNED NOT NULL auto_increment,
 customer_name varchar(25) NOT NULL,
 balance DECIMAL(20,2) DEFAULT '0.00' NOT NULL,
 passcode varchar(25) NOT NULL,
 PRIMARY KEY(customer_id));
 

 CREATE TABLE stock (
 stock_id INT UNSIGNED NOT NULL auto_increment,
 stock_name varCHAR(25) NOT NULL,
 stock_price DECIMAL(10,2) NOT NULL,
 total_stocks int unsigned not null,
 remaining_stocks int unsigned not null,
 PRIMARY KEY(stock_id));
 
 
 CREATE TABLE bought (
 customer_id INT UNSIGNED NOT NULL references customer,
 stock_id INT UNSIGNED NOT NULL references stock, 
 stocks_purchased int unsigned not null,
 PRIMARY KEY(customer_id, stock_id));
 
 
 
DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE 
`new_user`(IN user_name VARCHAR(25), IN user_balance decimal(20,2), in new_password varchar(25))
 MODIFIES SQL DATA
 DETERMINISTIC
 SQL SECURITY INVOKER
 COMMENT 'CREATE NEW USER WITH THE INPUTTED USER NAME AND PASSWORD AND GENERATE THE UNIQUE USER_ID'
BEGIN
START TRANSACTION;
insert into customer (customer_name, balance, passcode) values (user_name, user_balance, new_password); 
select max(customer_id) as id, user_name as Customer_name, user_balance as balance from customer;
COMMIT;
END$$
DELIMITER ;



 
 DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE 
`buy`(IN c_id int unsigned, in passcode varchar(25), in s_id int unsigned, IN price decimal(10,2), in stock_number int unsigned)
 modifies sql data
 DETERMINISTIC
 SQL SECURITY INVOKER
 COMMENT 'Procedure to buy number of stocks inputted by the user'
BEGIN
DECLARE BUDGET DECIMAL(20,2);
START TRANSACTION;
IF EXISTS (SELECT * FROM CUSTOMER WHERE CUSTOMER_ID = C_ID) AND EXISTS (SELECT * FROM STOCK WHERE STOCK_ID = S_ID) THEN
	if (select CUSTOMER.passcode from customer where customer_id = c_id) = passcode THEN
	
		SELECT BALANCE FROM CUSTOMER WHERE CUSTOMER.customer_id = c_id into BUDGET;
		SELECT BUDGET-PRICE*STOCK_NUMBER INTO BUDGET;
    
		IF (BUDGET >=0) AND (PRICE >= (SELECT STOCK_PRICE FROM STOCK WHERE STOCK_ID = S_ID)) AND (STOCK_NUMBER <= (SELECT REMAINING_STOCKS FROM STOCK WHERE STOCK_ID = S_ID)) THEN 
			UPDATE CUSTOMER SET BALANCE = BUDGET WHERE customer.CUSTOMER_ID = C_ID;
			UPDATE STOCK SET REMAINING_STOCKS = REMAINING_STOCKS- STOCK_NUMBER WHERE STOCK.STOCK_ID = S_ID;
    
			IF (EXISTS (SELECT * FROM BOUGHT WHERE CUSTOMER_ID = C_ID AND STOCK_ID = S_ID)) THEN
				UPDATE BOUGHT SET STOCKS_PURCHASED = (STOCKS_PURCHASED + STOCK_NUMBER) WHERE CUSTOMER_ID = C_ID AND STOCK_ID = S_ID;
			ELSE 
				insert INTO BOUGHT(CUSTOMER_ID, STOCK_ID, STOCKS_PURCHASED) VALUES(C_ID, S_ID, STOCK_NUMBER);
			END IF;
            SELECT 'BUY SUCCESSFUL' AS MESSAGE;
		ELSE 
			SELECT 'BUY UN-SUCCESSFUL' AS MESSAGE;
		END IF;
	ELSE 
		SELECT 'INVALID PASSWORD' AS MESSAGE;
	END IF;
ELSE 
	SELECT 'INVALID USER_ID OR STOCK_ID' AS MESSAGE;
END IF;
COMMIT;
END$$
DELIMITER ;



 DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE 
`SELL`(IN c_id int unsigned, IN PASSCODE VARCHAR(25), in s_id int unsigned, in stock_number int unsigned)
 modifies sql data
 DETERMINISTIC
 SQL SECURITY INVOKER
 COMMENT 'Procedure to SELL number of stocks inputted by the user'
BEGIN
DECLARE s_price DECIMAL(10,2);
START TRANSACTION;
IF EXISTS (SELECT * FROM CUSTOMER WHERE CUSTOMER_ID = C_ID) AND EXISTS (SELECT * FROM STOCK WHERE STOCK_ID = S_ID) THEN
	
    if (select passcode from customer where customer_id = c_id) = passcode THEN
		SELECT stock_price FROM stock WHERE stock.stock_id = s_id into s_price;
    
		IF (stock_number <= (select stocks_purchased from bought where stock_id = s_id and customer_id = c_id)) THEN 
			UPDATE CUSTOMER SET BALANCE = balance + s_price * stock_number WHERE customer.CUSTOMER_ID = C_ID;
			UPDATE STOCK SET REMAINING_STOCKS = REMAINING_STOCKS+ STOCK_NUMBER WHERE STOCK.STOCK_ID = S_ID;
			UPDATE bought SET stocks_purchased = stocks_purchased - stock_number WHERE bought.CUSTOMER_ID = C_ID and bought.stock_id = s_id;
            SELECT 'SELLING SUCCESSFUL' AS MESSAGE;
		else 
			select 'YOU DO NOT OWN SUFFICIENT STOCKS. SELLING UNSUCCESFUL!' AS MESSAGE;
		END IF;	
	ELSE 
		SELECT 'INVALID PASSWORD' AS MESSAGE;
	END IF;
        
ELSE 
	SELECT 'INVALID USER_ID OR STOCK_ID' AS MESSAGE;
END IF;
COMMIT;
END$$
DELIMITER ;



DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE 
`UPDATE_BALANCE`(IN c_id int unsigned, IN ADD_BALANCE DECIMAL(20,2))
 modifies sql data
 DETERMINISTIC
 SQL SECURITY INVOKER
 COMMENT 'Procedure FOR USER TO RECHARGE THEIR ACCOUNT BALANCE'
BEGIN
START TRANSACTION;
IF EXISTS (SELECT * FROM CUSTOMER WHERE CUSTOMER_ID = C_ID) THEN
	
	UPDATE CUSTOMER SET BALANCE = balance + ADD_BALANCE WHERE customer.CUSTOMER_ID = C_ID;
    SELECT 'BALANCE UPDATION SUCCESSFUL' AS MESSAGE;
else
	select 'USER DOES NOT EXIST' AS MESSAGE;

END IF;
COMMIT;
END$$
DELIMITER ;




DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE 
`STOCK_INFO_SPECIFIC`(IN S_ID int unsigned)
 modifies sql data
 DETERMINISTIC
 SQL SECURITY INVOKER
 COMMENT 'DISPLAY INFORMATION ON STOCKS OF THE COMPANY OF PASSED STOCK_ID'
BEGIN
START TRANSACTION;
IF EXISTS (SELECT * FROM STOCK WHERE STOCK_ID = S_ID) THEN
	
	SELECT STOCK_ID, STOCK_NAME, STOCK_PRICE, REMAINING_STOCKS FROM STOCK WHERE STOCK_ID = S_ID;  

ELSE 
	SELECT 'INVALID STOCK_ID' AS MESSAGE;

END IF;
commit;
END$$
DELIMITER ;



DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE 
`STOCK_INFO_OVERALL`()
 modifies sql data
 DETERMINISTIC
 SQL SECURITY INVOKER
 COMMENT 'DISPLAY INFORMATION OF ALL STOCK AVAILABLE'
BEGIN
START TRANSACTION;

	SELECT STOCK_ID, STOCK_PRICE, REMAINING_STOCKS FROM STOCK;  
COMMIT;
END$$
DELIMITER ;



DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE 
`purchase_history`(IN c_id int unsigned, IN PASSCODE VARCHAR(25))
 modifies sql data
 DETERMINISTIC
 SQL SECURITY INVOKER
 COMMENT 'DISPLAY THE PURCHASE INFORMATION OF THE USER'
BEGIN
START TRANSACTION;
IF EXISTS (SELECT * FROM CUSTOMER WHERE CUSTOMER_ID = C_ID) THEN
	
    if (select CUSTOMER.passcode from customer where customer_id = c_id) = passcode THEN
		SELECT * FROM bought WHERE bought.customer_id = c_id;    
	ELSE 
		SELECT 'INVALID PASSWORD' AS MESSAGE;
	END IF;
        
ELSE 
	SELECT 'INVALID USER_ID' AS MESSAGE;
END IF;
COMMIT;
END$$
DELIMITER ;




DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE 
`VIEW_BALANCE`(IN c_id int unsigned, IN PASSCODE VARCHAR(25))
 modifies sql data
 DETERMINISTIC
 SQL SECURITY INVOKER
 COMMENT 'DISPLAY THE CURRENT BALANCE OF THE USER'
BEGIN
START TRANSACTION;
IF EXISTS (SELECT * FROM CUSTOMER WHERE CUSTOMER_ID = C_ID) THEN
	
    if (select CUSTOMER.passcode from customer where customer_id = c_id) = passcode THEN
		SELECT CUSTOMER_ID, CUSTOMER_NAME, BALANCE FROM CUSTOMER WHERE CUSTOMER.customer_id = c_id;    
	ELSE 
		SELECT 'INVALID PASSWORD' AS MESSAGE;
	END IF;
        
ELSE 
	SELECT 'INVALID USER_ID' AS MESSAGE;
END IF;
COMMIT;
END$$
DELIMITER ;

 insert into stock (stock_name, stock_price, total_stocks, remaining_stocks)  values 
 ('TCS', 3705.00, 1000, 1000), ('INFOSYS', 1750.25, 800, 800),('HDFC', 2418.63, 850, 850), ('ITC', 265.25, 1200, 1200),
 ('NTPC', 151.70, 1250, 1250), ('TATA STEEL', 1330.40, 2500, 2500), ('NESTLE INDIA', 18382.50, 1900, 1900), ('AXIS BANK', 781.20, 1300, 1300),
 ('ICICI BANK', 752.00, 1500, 1500), ('ASIAN PAINTS', 3146.40, 520, 520);
 
 
CALL NEW_USER('ALICE LI', 1000000, 'ALICE123'); 
CALL NEW_USER('ZACK YU', 20000000, 'ZACK123');
call stock_info_overall();

CALL PURCHASE_HISTORY(1, 'ALICE123'); -- SHOW PREVIOUS STOCK RECORDS OF CUSTOMER
CALL BUY(1, 'ALICE', 2, 1800, 5); -- PASSWORD WRONG
CALL BUY(1, 'ALICE123', 2, 1800, 5); 
CALL PURCHASE_HISTORY(1, 'ALICE123');

CALL SELL(1, 'ALICE123', 2, 8);
CALL SELL(1, 'ALICE123', 2, 2);
CALL PURCHASE_HISTORY(1, 'ALICE123');

CALL VIEW_BALANCE(1, 'ALICE123');
CALL UPDATE_BALANCE(1, 5000);
CALL VIEW_BALANCE(1, 'ALICE123');

CALL STOCK_INFO_SPECIFIC(1);
CALL STOCK_INFO_OVERALL();
CALL STOCK_INFO_SPECIFIC(15);
CALL BUY(3, 'HEM123', 2, 1800, 5);
CALL VIEW_BALANCE(3, 'HEM123');

CALL STOCK_INFO_SPECIFIC(2);
CALL BUY(1, 'ALICE123', 2, 1000, 1);

-- DROP PROCEDURE BUY;
-- DROP PROCEDURE SELL;
-- DROP PROCEDURE UPDATE_BALANCE;
-- DROP PROCEDURE STOCK_INFO_SPECIFIC;
-- DROP PROCEDURE STOCK_INFO_OVERALL;
-- DROP PROCEDURE VIEW_BALANCE;
-- DROP PROCEDURE NEW_USER;
-- DROP PROCEDURE PURCHASE_HISTORY;
-- DROP TABLE CUSTOMER;
-- DROP TABLE STOCK;
-- DROP TABLE BOUGHT;
-- DROP DATABASE GROUP127;


